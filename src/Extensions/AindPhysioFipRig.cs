//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindPhysiologyFip.Rig
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BaseModel
    {
    
        public BaseModel()
        {
        }
    
        protected BaseModel(BaseModel other)
        {
        }
    
        public System.IObservable<BaseModel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseModel(this)));
        }
    
        public System.IObservable<BaseModel> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Circle
    {
    
        private Point2f _center;
    
        private double _radius = 50D;
    
        public Circle()
        {
        }
    
        protected Circle(Circle other)
        {
            _center = other._center;
            _radius = other._radius;
        }
    
        /// <summary>
        /// Center of the circle (px)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("center")]
        [System.ComponentModel.DescriptionAttribute("Center of the circle (px)")]
        public Point2f Center
        {
            get
            {
                return _center;
            }
            set
            {
                _center = value;
            }
        }
    
        /// <summary>
        /// Radius of the circle (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("radius")]
        [System.ComponentModel.DescriptionAttribute("Radius of the circle (px)")]
        public double Radius
        {
            get
            {
                return _radius;
            }
            set
            {
                _radius = value;
            }
        }
    
        public System.IObservable<Circle> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Circle(this)));
        }
    
        public System.IObservable<Circle> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Circle(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("center = " + _center + ", ");
            stringBuilder.Append("radius = " + _radius);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FipCamera
    {
    
        private string _deviceType = "SpinnakerCamera";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private int _binning = 1;
    
        private FipCameraColorProcessing _colorProcessing = AindPhysiologyFip.Rig.FipCameraColorProcessing.Default;
    
        private int _exposure = 1000;
    
        private double _gain = 0D;
    
        private double? _gamma;
    
        private int _adcBitDepth = 2;
    
        private SpinnakerCameraPixelFormat? _pixelFormat = AindPhysiologyFip.Rig.SpinnakerCameraPixelFormat.Mono16;
    
        private Rect _regionOfInterest;
    
        private VideoMatrixWriter _videoWriter;
    
        public FipCamera()
        {
        }
    
        protected FipCamera(FipCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _binning = other._binning;
            _colorProcessing = other._colorProcessing;
            _exposure = other._exposure;
            _gain = other._gain;
            _gamma = other._gamma;
            _adcBitDepth = other._adcBitDepth;
            _pixelFormat = other._pixelFormat;
            _regionOfInterest = other._regionOfInterest;
            _videoWriter = other._videoWriter;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Binning
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [System.ComponentModel.DescriptionAttribute("Binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        /// <summary>
        /// Color processing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("color_processing")]
        [System.ComponentModel.DescriptionAttribute("Color processing")]
        public FipCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        /// <summary>
        /// Exposure time
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [System.ComponentModel.DescriptionAttribute("Exposure time")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Gamma. If None, will disable gamma correction.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gamma")]
        [System.ComponentModel.DescriptionAttribute("Gamma. If None, will disable gamma correction.")]
        public double? Gamma
        {
            get
            {
                return _gamma;
            }
            set
            {
                _gamma = value;
            }
        }
    
        /// <summary>
        /// ADC bit depth. If None will be left as default.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("adc_bit_depth")]
        [System.ComponentModel.DescriptionAttribute("ADC bit depth. If None will be left as default.")]
        public int AdcBitDepth
        {
            get
            {
                return _adcBitDepth;
            }
            set
            {
                _adcBitDepth = value;
            }
        }
    
        /// <summary>
        /// Pixel format. If None will be left as default.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pixel_format")]
        [System.ComponentModel.DescriptionAttribute("Pixel format. If None will be left as default.")]
        public SpinnakerCameraPixelFormat? PixelFormat
        {
            get
            {
                return _pixelFormat;
            }
            set
            {
                _pixelFormat = value;
            }
        }
    
        /// <summary>
        /// Region of interest
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("region_of_interest")]
        [System.ComponentModel.DescriptionAttribute("Region of interest")]
        public Rect RegionOfInterest
        {
            get
            {
                return _regionOfInterest;
            }
            set
            {
                _regionOfInterest = value;
            }
        }
    
        /// <summary>
        /// Video writer. If not provided, no video will be saved.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer")]
        [System.ComponentModel.DescriptionAttribute("Video writer. If not provided, no video will be saved.")]
        public VideoMatrixWriter VideoWriter
        {
            get
            {
                return _videoWriter;
            }
            set
            {
                _videoWriter = value;
            }
        }
    
        public System.IObservable<FipCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FipCamera(this)));
        }
    
        public System.IObservable<FipCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FipCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("binning = " + _binning + ", ");
            stringBuilder.Append("color_processing = " + _colorProcessing + ", ");
            stringBuilder.Append("exposure = " + _exposure + ", ");
            stringBuilder.Append("gain = " + _gain + ", ");
            stringBuilder.Append("gamma = " + _gamma + ", ");
            stringBuilder.Append("adc_bit_depth = " + _adcBitDepth + ", ");
            stringBuilder.Append("pixel_format = " + _pixelFormat + ", ");
            stringBuilder.Append("region_of_interest = " + _regionOfInterest + ", ");
            stringBuilder.Append("video_writer = " + _videoWriter);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpCuttlefishFip
    {
    
        private string _deviceType = "cuTTLefishFip";
    
        private HarpCuttlefishFipSettings _additionalSettings = new HarpCuttlefishFipSettings();
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1407;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpCuttlefishFip()
        {
        }
    
        protected HarpCuttlefishFip(HarpCuttlefishFip other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings for the cuTTLefishFip device
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Additional settings for the cuTTLefishFip device")]
        public HarpCuttlefishFipSettings AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpCuttlefishFip> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpCuttlefishFip(this)));
        }
    
        public System.IObservable<HarpCuttlefishFip> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpCuttlefishFip(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpCuttlefishFipSettings
    {
    
        private int _greenLightSourceDutyCyle = 1;
    
        private int _redLightSourceDutyCycle = 1;
    
        public HarpCuttlefishFipSettings()
        {
        }
    
        protected HarpCuttlefishFipSettings(HarpCuttlefishFipSettings other)
        {
            _greenLightSourceDutyCyle = other._greenLightSourceDutyCyle;
            _redLightSourceDutyCycle = other._redLightSourceDutyCycle;
        }
    
        /// <summary>
        /// Green light source power (0-100%)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("green_light_source_duty_cyle")]
        [System.ComponentModel.DescriptionAttribute("Green light source power (0-100%)")]
        public int GreenLightSourceDutyCyle
        {
            get
            {
                return _greenLightSourceDutyCyle;
            }
            set
            {
                _greenLightSourceDutyCyle = value;
            }
        }
    
        /// <summary>
        /// Red light source power (0-100%)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("red_light_source_duty_cycle")]
        [System.ComponentModel.DescriptionAttribute("Red light source power (0-100%)")]
        public int RedLightSourceDutyCycle
        {
            get
            {
                return _redLightSourceDutyCycle;
            }
            set
            {
                _redLightSourceDutyCycle = value;
            }
        }
    
        public System.IObservable<HarpCuttlefishFipSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpCuttlefishFipSettings(this)));
        }
    
        public System.IObservable<HarpCuttlefishFipSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpCuttlefishFipSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("green_light_source_duty_cyle = " + _greenLightSourceDutyCyle + ", ");
            stringBuilder.Append("red_light_source_duty_cycle = " + _redLightSourceDutyCycle);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Networking
    {
    
        private ZmqConnection _zmqPublisher;
    
        private ZmqConnection _zmqSubscriber;
    
        public Networking()
        {
        }
    
        protected Networking(Networking other)
        {
            _zmqPublisher = other._zmqPublisher;
            _zmqSubscriber = other._zmqSubscriber;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmq_publisher")]
        public ZmqConnection ZmqPublisher
        {
            get
            {
                return _zmqPublisher;
            }
            set
            {
                _zmqPublisher = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmq_subscriber")]
        public ZmqConnection ZmqSubscriber
        {
            get
            {
                return _zmqSubscriber;
            }
            set
            {
                _zmqSubscriber = value;
            }
        }
    
        public System.IObservable<Networking> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Networking(this)));
        }
    
        public System.IObservable<Networking> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Networking(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("zmq_publisher = " + _zmqPublisher + ", ");
            stringBuilder.Append("zmq_subscriber = " + _zmqSubscriber);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Point2f
    {
    
        private double _x;
    
        private double _y;
    
        public Point2f()
        {
        }
    
        protected Point2f(Point2f other)
        {
            _x = other._x;
            _y = other._y;
        }
    
        /// <summary>
        /// X coordinate of the point (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the point (px)")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the point (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the point (px)")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        public System.IObservable<Point2f> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Point2f(this)));
        }
    
        public System.IObservable<Point2f> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Point2f(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Rect
    {
    
        private int _x = 0;
    
        private int _y = 0;
    
        private int _width = 0;
    
        private int _height = 0;
    
        public Rect()
        {
        }
    
        protected Rect(Rect other)
        {
            _x = other._x;
            _y = other._y;
            _width = other._width;
            _height = other._height;
        }
    
        /// <summary>
        /// X coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the top-left corner")]
        public int X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the top-left corner")]
        public int Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Width of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [System.ComponentModel.DescriptionAttribute("Width of the rectangle")]
        public int Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        /// <summary>
        /// Height of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [System.ComponentModel.DescriptionAttribute("Height of the rectangle")]
        public int Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        public System.IObservable<Rect> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rect(this)));
        }
    
        public System.IObservable<Rect> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rect(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y + ", ");
            stringBuilder.Append("width = " + _width + ", ");
            stringBuilder.Append("height = " + _height);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RoiSettings
    {
    
        private Circle _cameraGreenIso = new Circle();
    
        private Circle _cameraRed = new Circle();
    
        private string _operation = "Avg";
    
        public RoiSettings()
        {
        }
    
        protected RoiSettings(RoiSettings other)
        {
            _cameraGreenIso = other._cameraGreenIso;
            _cameraRed = other._cameraRed;
            _operation = other._operation;
        }
    
        /// <summary>
        /// Region of interest to be applied to the green and iso camera channel
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_green_iso", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Region of interest to be applied to the green and iso camera channel")]
        public Circle CameraGreenIso
        {
            get
            {
                return _cameraGreenIso;
            }
            set
            {
                _cameraGreenIso = value;
            }
        }
    
        /// <summary>
        /// Region of interest to be applied to the red camera channel
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_red", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Region of interest to be applied to the red camera channel")]
        public Circle CameraRed
        {
            get
            {
                return _cameraRed;
            }
            set
            {
                _cameraRed = value;
            }
        }
    
        /// <summary>
        /// Operation to be applied to the region of interest
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        [System.ComponentModel.DescriptionAttribute("Operation to be applied to the region of interest")]
        public string Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        public System.IObservable<RoiSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RoiSettings(this)));
        }
    
        public System.IObservable<RoiSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RoiSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("camera_green_iso = " + _cameraGreenIso + ", ");
            stringBuilder.Append("camera_red = " + _cameraRed + ", ");
            stringBuilder.Append("operation = " + _operation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SpinnakerCameraPixelFormat
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Mono8 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Mono16 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Rgb8packed = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Bayergr8 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Bayerrg8 = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
        Bayergb8 = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
        Bayerbg8 = 6,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
        Bayergr16 = 7,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
        Bayerrg16 = 8,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
        Bayergb16 = 9,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
        Bayerbg16 = 10,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
        Mono12packed = 11,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
        Bayergr12packed = 12,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
        Bayerrg12packed = 13,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
        Bayergb12packed = 14,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
        Bayerbg12packed = 15,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
        Yuv411packed = 16,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
        Yuv422packed = 17,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
        Yuv444packed = 18,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
        Mono12p = 19,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
        Bayergr12p = 20,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
        Bayerrg12p = 21,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
        Bayergb12p = 22,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
        Bayerbg12p = 23,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
        Ycbcr8 = 24,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
        Ycbcr4228 = 25,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
        Ycbcr4118 = 26,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
        Bgr8 = 27,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
        Bgra8 = 28,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
        Mono10packed = 29,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
        Bayergr10packed = 30,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
        Bayerrg10packed = 31,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
        Bayergb10packed = 32,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="33")]
        Bayerbg10packed = 33,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="34")]
        Mono10p = 34,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="35")]
        Bayergr10p = 35,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="36")]
        Bayerrg10p = 36,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
        Bayergb10p = 37,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
        Bayerbg10p = 38,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
        Mono1p = 39,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
        Mono2p = 40,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
        Mono4p = 41,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
        Mono8s = 42,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
        Mono10 = 43,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
        Mono12 = 44,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
        Mono14 = 45,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
        Mono16s = 46,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
        Mono32f = 47,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
        Bayerbg10 = 48,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
        Bayerbg12 = 49,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
        Bayergb10 = 50,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
        Bayergb12 = 51,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
        Bayergr10 = 52,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
        Bayergr12 = 53,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
        Bayerrg10 = 54,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
        Bayerrg12 = 55,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
        Rgba8 = 56,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
        Rgba10 = 57,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
        Rgba10p = 58,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
        Rgba12 = 59,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
        Rgba12p = 60,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
        Rgba14 = 61,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
        Rgba16 = 62,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
        Rgb8 = 63,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
        Rgb8Planar = 64,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
        Rgb10 = 65,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
        Rgb10Planar = 66,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
        Rgb10p = 67,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
        Rgb10p32 = 68,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
        Rgb12 = 69,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
        Rgb12Planar = 70,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
        Rgb12p = 71,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
        Rgb14 = 72,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
        Rgb16 = 73,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
        Rgb16s = 74,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
        Rgb32f = 75,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
        Rgb16Planar = 76,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
        Rgb565p = 77,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
        Bgra10 = 78,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
        Bgra10p = 79,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
        Bgra12 = 80,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
        Bgra12p = 81,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
        Bgra14 = 82,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
        Bgra16 = 83,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
        Rgba32f = 84,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
        Bgr10 = 85,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
        Bgr10p = 86,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
        Bgr12 = 87,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
        Bgr12p = 88,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
        Bgr14 = 89,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
        Bgr16 = 90,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
        Bgr565p = 91,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="92")]
        R8 = 92,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="93")]
        R10 = 93,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="94")]
        R12 = 94,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="95")]
        R16 = 95,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="96")]
        G8 = 96,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="97")]
        G10 = 97,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="98")]
        G12 = 98,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="99")]
        G16 = 99,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        B8 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
        B10 = 101,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
        B12 = 102,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
        B16 = 103,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
        Coord3dAbc8 = 104,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="105")]
        Coord3dAbc8Planar = 105,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="106")]
        Coord3dAbc10p = 106,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="107")]
        Coord3dAbc10pPlanar = 107,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="108")]
        Coord3dAbc12p = 108,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="109")]
        Coord3dAbc12pPlanar = 109,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="110")]
        Coord3dAbc16 = 110,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="111")]
        Coord3dAbc16Planar = 111,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="112")]
        Coord3dAbc32f = 112,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="113")]
        Coord3dAbc32fPlanar = 113,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="114")]
        Coord3dAc8 = 114,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="115")]
        Coord3dAc8Planar = 115,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="116")]
        Coord3dAc10p = 116,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="117")]
        Coord3dAc10pPlanar = 117,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="118")]
        Coord3dAc12p = 118,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="119")]
        Coord3dAc12pPlanar = 119,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="120")]
        Coord3dAc16 = 120,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="121")]
        Coord3dAc16Planar = 121,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="122")]
        Coord3dAc32f = 122,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="123")]
        Coord3dAc32fPlanar = 123,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="124")]
        Coord3dA8 = 124,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="125")]
        Coord3dA10p = 125,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="126")]
        Coord3dA12p = 126,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="127")]
        Coord3dA16 = 127,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
        Coord3dA32f = 128,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="129")]
        Coord3dB8 = 129,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="130")]
        Coord3dB10p = 130,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="131")]
        Coord3dB12p = 131,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="132")]
        Coord3dB16 = 132,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="133")]
        Coord3dB32f = 133,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="134")]
        Coord3dC8 = 134,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="135")]
        Coord3dC10p = 135,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="136")]
        Coord3dC12p = 136,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="137")]
        Coord3dC16 = 137,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="138")]
        Coord3dC32f = 138,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="139")]
        Confidence1 = 139,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="140")]
        Confidence1p = 140,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="141")]
        Confidence8 = 141,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="142")]
        Confidence16 = 142,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="143")]
        Confidence32f = 143,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class VideoMatrixWriter
    {
    
        private string _videoWriterType = "VideoMatrixWriter";
    
        private string _containerExtension = "bin";
    
        private VideoMatrixWriterLayout _layout = AindPhysiologyFip.Rig.VideoMatrixWriterLayout.ColumnMajor;
    
        private int _spatialDownsample = 1;
    
        public VideoMatrixWriter()
        {
        }
    
        protected VideoMatrixWriter(VideoMatrixWriter other)
        {
            _videoWriterType = other._videoWriterType;
            _containerExtension = other._containerExtension;
            _layout = other._layout;
            _spatialDownsample = other._spatialDownsample;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer_type")]
        public string VideoWriterType
        {
            get
            {
                return _videoWriterType;
            }
            set
            {
                _videoWriterType = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Layout of the video matrix
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("layout")]
        [System.ComponentModel.DescriptionAttribute("Layout of the video matrix")]
        public VideoMatrixWriterLayout Layout
        {
            get
            {
                return _layout;
            }
            set
            {
                _layout = value;
            }
        }
    
        /// <summary>
        /// Downsample factor
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("spatial_downsample")]
        [System.ComponentModel.DescriptionAttribute("Downsample factor")]
        public int SpatialDownsample
        {
            get
            {
                return _spatialDownsample;
            }
            set
            {
                _spatialDownsample = value;
            }
        }
    
        public System.IObservable<VideoMatrixWriter> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoMatrixWriter(this)));
        }
    
        public System.IObservable<VideoMatrixWriter> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoMatrixWriter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("video_writer_type = " + _videoWriterType + ", ");
            stringBuilder.Append("container_extension = " + _containerExtension + ", ");
            stringBuilder.Append("layout = " + _layout + ", ");
            stringBuilder.Append("spatial_downsample = " + _spatialDownsample);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZmqConnection
    {
    
        private string _connectionString = "@tcp://localhost:5556";
    
        private string _topic = "";
    
        public ZmqConnection()
        {
        }
    
        protected ZmqConnection(ZmqConnection other)
        {
            _connectionString = other._connectionString;
            _topic = other._topic;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("connection_string")]
        public string ConnectionString
        {
            get
            {
                return _connectionString;
            }
            set
            {
                _connectionString = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("topic")]
        public string Topic
        {
            get
            {
                return _topic;
            }
            set
            {
                _topic = value;
            }
        }
    
        public System.IObservable<ZmqConnection> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ZmqConnection(this)));
        }
    
        public System.IObservable<ZmqConnection> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ZmqConnection(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("connection_string = " + _connectionString + ", ");
            stringBuilder.Append("topic = " + _topic);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindPhysioFipRig
    {
    
        private string _aindBehaviorServicesPkgVersion = "0.10.2";
    
        private string _version = "0.1.0";
    
        private string _computerName;
    
        private string _rigName;
    
        private FipCamera _cameraGreenIso = new FipCamera();
    
        private FipCamera _cameraRed = new FipCamera();
    
        private System.Collections.Generic.List<RoiSettings> _roiSettings = new System.Collections.Generic.List<RoiSettings>();
    
        private HarpCuttlefishFip _cuttlefishFip = new HarpCuttlefishFip();
    
        private Networking _networking;
    
        public AindPhysioFipRig()
        {
        }
    
        protected AindPhysioFipRig(AindPhysioFipRig other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _computerName = other._computerName;
            _rigName = other._rigName;
            _cameraGreenIso = other._cameraGreenIso;
            _cameraRed = other._cameraRed;
            _roiSettings = other._roiSettings;
            _cuttlefishFip = other._cuttlefishFip;
            _networking = other._networking;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Computer name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("computer_name")]
        [System.ComponentModel.DescriptionAttribute("Computer name")]
        public string ComputerName
        {
            get
            {
                return _computerName;
            }
            set
            {
                _computerName = value;
            }
        }
    
        /// <summary>
        /// Rig name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rig name")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        /// <summary>
        /// Camera for the green and iso channels
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_green_iso", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera for the green and iso channels")]
        public FipCamera CameraGreenIso
        {
            get
            {
                return _cameraGreenIso;
            }
            set
            {
                _cameraGreenIso = value;
            }
        }
    
        /// <summary>
        /// Red camera
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_red", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Red camera")]
        public FipCamera CameraRed
        {
            get
            {
                return _cameraRed;
            }
            set
            {
                _cameraRed = value;
            }
        }
    
        /// <summary>
        /// Region of interest settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("roi_settings")]
        [System.ComponentModel.DescriptionAttribute("Region of interest settings")]
        public System.Collections.Generic.List<RoiSettings> RoiSettings
        {
            get
            {
                return _roiSettings;
            }
            set
            {
                _roiSettings = value;
            }
        }
    
        /// <summary>
        /// CuttlefishFip board for controlling the trigger of cameras and light-sources
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cuttlefish_fip", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("CuttlefishFip board for controlling the trigger of cameras and light-sources")]
        public HarpCuttlefishFip CuttlefishFip
        {
            get
            {
                return _cuttlefishFip;
            }
            set
            {
                _cuttlefishFip = value;
            }
        }
    
        /// <summary>
        /// Networking settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("networking")]
        [System.ComponentModel.DescriptionAttribute("Networking settings")]
        public Networking Networking
        {
            get
            {
                return _networking;
            }
            set
            {
                _networking = value;
            }
        }
    
        public System.IObservable<AindPhysioFipRig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindPhysioFipRig(this)));
        }
    
        public System.IObservable<AindPhysioFipRig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindPhysioFipRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("aind_behavior_services_pkg_version = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("computer_name = " + _computerName + ", ");
            stringBuilder.Append("rig_name = " + _rigName + ", ");
            stringBuilder.Append("camera_green_iso = " + _cameraGreenIso + ", ");
            stringBuilder.Append("camera_red = " + _cameraRed + ", ");
            stringBuilder.Append("roi_settings = " + _roiSettings + ", ");
            stringBuilder.Append("cuttlefish_fip = " + _cuttlefishFip + ", ");
            stringBuilder.Append("networking = " + _networking);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FipCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum VideoMatrixWriterLayout
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="RawMajor")]
        RawMajor = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="ColumnMajor")]
        ColumnMajor = 1,
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<BaseModel> source)
        {
            return Process<BaseModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Circle> source)
        {
            return Process<Circle>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FipCamera> source)
        {
            return Process<FipCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpCuttlefishFip> source)
        {
            return Process<HarpCuttlefishFip>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpCuttlefishFipSettings> source)
        {
            return Process<HarpCuttlefishFipSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Networking> source)
        {
            return Process<Networking>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Point2f> source)
        {
            return Process<Point2f>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rect> source)
        {
            return Process<Rect>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RoiSettings> source)
        {
            return Process<RoiSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoMatrixWriter> source)
        {
            return Process<VideoMatrixWriter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqConnection> source)
        {
            return Process<ZmqConnection>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindPhysioFipRig> source)
        {
            return Process<AindPhysioFipRig>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Circle>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FipCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpCuttlefishFip>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpCuttlefishFipSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Networking>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Point2f>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rect>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RoiSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoMatrixWriter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqConnection>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindPhysioFipRig>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindPhysioFipRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}