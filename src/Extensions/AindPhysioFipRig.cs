//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindPhysiologyFip.Rig
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class BaseModel
    {
    
        public BaseModel()
        {
        }
    
        protected BaseModel(BaseModel other)
        {
        }
    
        public System.IObservable<BaseModel> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseModel(this)));
        }
    
        public System.IObservable<BaseModel> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Circle
    {
    
        private Point2f _center;
    
        private double _radius = 50D;
    
        public Circle()
        {
        }
    
        protected Circle(Circle other)
        {
            _center = other._center;
            _radius = other._radius;
        }
    
        /// <summary>
        /// Center of the circle (px)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("center")]
        [System.ComponentModel.DescriptionAttribute("Center of the circle (px)")]
        public Point2f Center
        {
            get
            {
                return _center;
            }
            set
            {
                _center = value;
            }
        }
    
        /// <summary>
        /// Radius of the circle (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("radius")]
        [System.ComponentModel.DescriptionAttribute("Radius of the circle (px)")]
        public double Radius
        {
            get
            {
                return _radius;
            }
            set
            {
                _radius = value;
            }
        }
    
        public System.IObservable<Circle> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Circle(this)));
        }
    
        public System.IObservable<Circle> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Circle(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("center = " + _center + ", ");
            stringBuilder.Append("radius = " + _radius);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FipCamera
    {
    
        private string _deviceType = "FipCamera";
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private double _gain = 0D;
    
        private Point2f _offset;
    
        public FipCamera()
        {
        }
    
        protected FipCamera(FipCamera other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _gain = other._gain;
            _offset = other._offset;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Offset (px)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("offset")]
        [System.ComponentModel.DescriptionAttribute("Offset (px)")]
        public Point2f Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        public System.IObservable<FipCamera> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FipCamera(this)));
        }
    
        public System.IObservable<FipCamera> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FipCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("gain = " + _gain + ", ");
            stringBuilder.Append("offset = " + _offset);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpCuttlefishFip
    {
    
        private string _deviceType = "cuTTLefishFip";
    
        private HarpCuttlefishFipSettings _additionalSettings = new HarpCuttlefishFipSettings();
    
        private BaseModel _calibration;
    
        private int _whoAmI = 1407;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpCuttlefishFip()
        {
        }
    
        protected HarpCuttlefishFip(HarpCuttlefishFip other)
        {
            _deviceType = other._deviceType;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Additional settings for the cuTTLefishFip device
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Additional settings for the cuTTLefishFip device")]
        public HarpCuttlefishFipSettings AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpCuttlefishFip> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpCuttlefishFip(this)));
        }
    
        public System.IObservable<HarpCuttlefishFip> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpCuttlefishFip(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("device_type = " + _deviceType + ", ");
            stringBuilder.Append("additional_settings = " + _additionalSettings + ", ");
            stringBuilder.Append("calibration = " + _calibration + ", ");
            stringBuilder.Append("who_am_i = " + _whoAmI + ", ");
            stringBuilder.Append("serial_number = " + _serialNumber + ", ");
            stringBuilder.Append("port_name = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpCuttlefishFipSettings
    {
    
        private int _greenLightSourceDutyCycle = 1;
    
        private int _redLightSourceDutyCycle = 1;
    
        public HarpCuttlefishFipSettings()
        {
        }
    
        protected HarpCuttlefishFipSettings(HarpCuttlefishFipSettings other)
        {
            _greenLightSourceDutyCycle = other._greenLightSourceDutyCycle;
            _redLightSourceDutyCycle = other._redLightSourceDutyCycle;
        }
    
        /// <summary>
        /// Green light source power (0-100%)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("green_light_source_duty_cycle")]
        [System.ComponentModel.DescriptionAttribute("Green light source power (0-100%)")]
        public int GreenLightSourceDutyCycle
        {
            get
            {
                return _greenLightSourceDutyCycle;
            }
            set
            {
                _greenLightSourceDutyCycle = value;
            }
        }
    
        /// <summary>
        /// Red light source power (0-100%)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("red_light_source_duty_cycle")]
        [System.ComponentModel.DescriptionAttribute("Red light source power (0-100%)")]
        public int RedLightSourceDutyCycle
        {
            get
            {
                return _redLightSourceDutyCycle;
            }
            set
            {
                _redLightSourceDutyCycle = value;
            }
        }
    
        public System.IObservable<HarpCuttlefishFipSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpCuttlefishFipSettings(this)));
        }
    
        public System.IObservable<HarpCuttlefishFipSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpCuttlefishFipSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("green_light_source_duty_cycle = " + _greenLightSourceDutyCycle + ", ");
            stringBuilder.Append("red_light_source_duty_cycle = " + _redLightSourceDutyCycle);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Networking
    {
    
        private ZmqConnection _zmqPublisher;
    
        private ZmqConnection _zmqSubscriber;
    
        public Networking()
        {
        }
    
        protected Networking(Networking other)
        {
            _zmqPublisher = other._zmqPublisher;
            _zmqSubscriber = other._zmqSubscriber;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmq_publisher")]
        public ZmqConnection ZmqPublisher
        {
            get
            {
                return _zmqPublisher;
            }
            set
            {
                _zmqPublisher = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmq_subscriber")]
        public ZmqConnection ZmqSubscriber
        {
            get
            {
                return _zmqSubscriber;
            }
            set
            {
                _zmqSubscriber = value;
            }
        }
    
        public System.IObservable<Networking> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Networking(this)));
        }
    
        public System.IObservable<Networking> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Networking(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("zmq_publisher = " + _zmqPublisher + ", ");
            stringBuilder.Append("zmq_subscriber = " + _zmqSubscriber);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Point2f
    {
    
        private double _x;
    
        private double _y;
    
        public Point2f()
        {
        }
    
        protected Point2f(Point2f other)
        {
            _x = other._x;
            _y = other._y;
        }
    
        /// <summary>
        /// X coordinate of the point (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the point (px)")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the point (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the point (px)")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        public System.IObservable<Point2f> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Point2f(this)));
        }
    
        public System.IObservable<Point2f> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Point2f(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("x = " + _x + ", ");
            stringBuilder.Append("y = " + _y);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RoiSettings
    {
    
        private Circle _cameraGreenIso = new Circle();
    
        private Circle _cameraRed = new Circle();
    
        private string _operation = "Avg";
    
        public RoiSettings()
        {
        }
    
        protected RoiSettings(RoiSettings other)
        {
            _cameraGreenIso = other._cameraGreenIso;
            _cameraRed = other._cameraRed;
            _operation = other._operation;
        }
    
        /// <summary>
        /// Region of interest to be applied to the green and iso camera channel
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_green_iso", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Region of interest to be applied to the green and iso camera channel")]
        public Circle CameraGreenIso
        {
            get
            {
                return _cameraGreenIso;
            }
            set
            {
                _cameraGreenIso = value;
            }
        }
    
        /// <summary>
        /// Region of interest to be applied to the red camera channel
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_red", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Region of interest to be applied to the red camera channel")]
        public Circle CameraRed
        {
            get
            {
                return _cameraRed;
            }
            set
            {
                _cameraRed = value;
            }
        }
    
        /// <summary>
        /// Operation to be applied to the region of interest
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("operation")]
        [System.ComponentModel.DescriptionAttribute("Operation to be applied to the region of interest")]
        public string Operation
        {
            get
            {
                return _operation;
            }
            set
            {
                _operation = value;
            }
        }
    
        public System.IObservable<RoiSettings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RoiSettings(this)));
        }
    
        public System.IObservable<RoiSettings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RoiSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("camera_green_iso = " + _cameraGreenIso + ", ");
            stringBuilder.Append("camera_red = " + _cameraRed + ", ");
            stringBuilder.Append("operation = " + _operation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ZmqConnection
    {
    
        private string _connectionString = "@tcp://localhost:5556";
    
        private string _topic = "";
    
        public ZmqConnection()
        {
        }
    
        protected ZmqConnection(ZmqConnection other)
        {
            _connectionString = other._connectionString;
            _topic = other._topic;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("connection_string")]
        public string ConnectionString
        {
            get
            {
                return _connectionString;
            }
            set
            {
                _connectionString = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("topic")]
        public string Topic
        {
            get
            {
                return _topic;
            }
            set
            {
                _topic = value;
            }
        }
    
        public System.IObservable<ZmqConnection> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ZmqConnection(this)));
        }
    
        public System.IObservable<ZmqConnection> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ZmqConnection(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("connection_string = " + _connectionString + ", ");
            stringBuilder.Append("topic = " + _topic);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class AindPhysioFipRig
    {
    
        private string _aindBehaviorServicesPkgVersion = "0.10.2";
    
        private string _version = "0.1.0";
    
        private string _computerName;
    
        private string _rigName;
    
        private FipCamera _cameraGreenIso = new FipCamera();
    
        private FipCamera _cameraRed = new FipCamera();
    
        private System.Collections.Generic.List<RoiSettings> _roiSettings = new System.Collections.Generic.List<RoiSettings>();
    
        private HarpCuttlefishFip _cuttlefishFip = new HarpCuttlefishFip();
    
        private Networking _networking;
    
        public AindPhysioFipRig()
        {
        }
    
        protected AindPhysioFipRig(AindPhysioFipRig other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _computerName = other._computerName;
            _rigName = other._rigName;
            _cameraGreenIso = other._cameraGreenIso;
            _cameraRed = other._cameraRed;
            _roiSettings = other._roiSettings;
            _cuttlefishFip = other._cuttlefishFip;
            _networking = other._networking;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Computer name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("computer_name")]
        [System.ComponentModel.DescriptionAttribute("Computer name")]
        public string ComputerName
        {
            get
            {
                return _computerName;
            }
            set
            {
                _computerName = value;
            }
        }
    
        /// <summary>
        /// Rig name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rig name")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        /// <summary>
        /// Camera for the green and iso channels
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_green_iso", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera for the green and iso channels")]
        public FipCamera CameraGreenIso
        {
            get
            {
                return _cameraGreenIso;
            }
            set
            {
                _cameraGreenIso = value;
            }
        }
    
        /// <summary>
        /// Red camera
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_red", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Red camera")]
        public FipCamera CameraRed
        {
            get
            {
                return _cameraRed;
            }
            set
            {
                _cameraRed = value;
            }
        }
    
        /// <summary>
        /// Region of interest settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("roi_settings")]
        [System.ComponentModel.DescriptionAttribute("Region of interest settings")]
        public System.Collections.Generic.List<RoiSettings> RoiSettings
        {
            get
            {
                return _roiSettings;
            }
            set
            {
                _roiSettings = value;
            }
        }
    
        /// <summary>
        /// CuttlefishFip board for controlling the trigger of cameras and light-sources
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cuttlefish_fip", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("CuttlefishFip board for controlling the trigger of cameras and light-sources")]
        public HarpCuttlefishFip CuttlefishFip
        {
            get
            {
                return _cuttlefishFip;
            }
            set
            {
                _cuttlefishFip = value;
            }
        }
    
        /// <summary>
        /// Networking settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("networking")]
        [System.ComponentModel.DescriptionAttribute("Networking settings")]
        public Networking Networking
        {
            get
            {
                return _networking;
            }
            set
            {
                _networking = value;
            }
        }
    
        public System.IObservable<AindPhysioFipRig> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindPhysioFipRig(this)));
        }
    
        public System.IObservable<AindPhysioFipRig> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindPhysioFipRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("aind_behavior_services_pkg_version = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("computer_name = " + _computerName + ", ");
            stringBuilder.Append("rig_name = " + _rigName + ", ");
            stringBuilder.Append("camera_green_iso = " + _cameraGreenIso + ", ");
            stringBuilder.Append("camera_red = " + _cameraRed + ", ");
            stringBuilder.Append("roi_settings = " + _roiSettings + ", ");
            stringBuilder.Append("cuttlefish_fip = " + _cuttlefishFip + ", ");
            stringBuilder.Append("networking = " + _networking);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<BaseModel> source)
        {
            return Process<BaseModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Circle> source)
        {
            return Process<Circle>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FipCamera> source)
        {
            return Process<FipCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpCuttlefishFip> source)
        {
            return Process<HarpCuttlefishFip>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpCuttlefishFipSettings> source)
        {
            return Process<HarpCuttlefishFipSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Networking> source)
        {
            return Process<Networking>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Point2f> source)
        {
            return Process<Point2f>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RoiSettings> source)
        {
            return Process<RoiSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqConnection> source)
        {
            return Process<ZmqConnection>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindPhysioFipRig> source)
        {
            return Process<AindPhysioFipRig>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Circle>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FipCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpCuttlefishFip>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpCuttlefishFipSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Networking>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Point2f>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RoiSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqConnection>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindPhysioFipRig>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindPhysioFipRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}