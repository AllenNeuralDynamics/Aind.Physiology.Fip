//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindPhysiologyFip
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindBehaviorSessionModel
    {
    
        private string _aindBehaviorServicesPkgVersion;
    
        private string _version;
    
        private string _experiment;
    
        private System.Collections.Generic.List<string> _experimenter;
    
        private System.DateTimeOffset _date;
    
        private string _rootPath;
    
        private string _sessionName;
    
        private string _subject;
    
        private string _experimentVersion;
    
        private string _notes;
    
        private string _commitHash;
    
        private bool _allowDirtyRepo;
    
        private bool _skipHardwareValidation;
    
        public AindBehaviorSessionModel()
        {
            _aindBehaviorServicesPkgVersion = "0.12.2";
            _version = "0.12.2";
            _experimenter = new System.Collections.Generic.List<string>();
            _experimentVersion = "";
            _allowDirtyRepo = false;
            _skipHardwareValidation = false;
        }
    
        protected AindBehaviorSessionModel(AindBehaviorSessionModel other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _experiment = other._experiment;
            _experimenter = other._experimenter;
            _date = other._date;
            _rootPath = other._rootPath;
            _sessionName = other._sessionName;
            _subject = other._subject;
            _experimentVersion = other._experimentVersion;
            _notes = other._notes;
            _commitHash = other._commitHash;
            _allowDirtyRepo = other._allowDirtyRepo;
            _skipHardwareValidation = other._skipHardwareValidation;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Name of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experiment")]
        [System.ComponentModel.DescriptionAttribute("Name of the experiment")]
        public string Experiment
        {
            get
            {
                return _experiment;
            }
            set
            {
                _experiment = value;
            }
        }
    
        /// <summary>
        /// Name of the experimenter
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("experimenter")]
        [System.ComponentModel.DescriptionAttribute("Name of the experimenter")]
        public System.Collections.Generic.List<string> Experimenter
        {
            get
            {
                return _experimenter;
            }
            set
            {
                _experimenter = value;
            }
        }
    
        /// <summary>
        /// Date of the experiment
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        [System.ComponentModel.DescriptionAttribute("Date of the experiment")]
        public System.DateTimeOffset Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        /// <summary>
        /// Root path where data will be logged
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("root_path", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Root path where data will be logged")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        /// <summary>
        /// Name of the session. This will be used to create a folder in the root path. If not provided, it will be generated using subject and date.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("session_name")]
        [System.ComponentModel.DescriptionAttribute("Name of the session. This will be used to create a folder in the root path. If no" +
            "t provided, it will be generated using subject and date.")]
        public string SessionName
        {
            get
            {
                return _sessionName;
            }
            set
            {
                _sessionName = value;
            }
        }
    
        /// <summary>
        /// Name of the subject
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("subject", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Name of the subject")]
        public string Subject
        {
            get
            {
                return _subject;
            }
            set
            {
                _subject = value;
            }
        }
    
        /// <summary>
        /// Version of the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("experiment_version")]
        [System.ComponentModel.DescriptionAttribute("Version of the experiment")]
        public string ExperimentVersion
        {
            get
            {
                return _experimentVersion;
            }
            set
            {
                _experimentVersion = value;
            }
        }
    
        /// <summary>
        /// Notes about the experiment
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        [System.ComponentModel.DescriptionAttribute("Notes about the experiment")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        /// <summary>
        /// Commit hash of the repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("commit_hash")]
        [System.ComponentModel.DescriptionAttribute("Commit hash of the repository")]
        public string CommitHash
        {
            get
            {
                return _commitHash;
            }
            set
            {
                _commitHash = value;
            }
        }
    
        /// <summary>
        /// Allow running from a dirty repository
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("allow_dirty_repo")]
        [System.ComponentModel.DescriptionAttribute("Allow running from a dirty repository")]
        public bool AllowDirtyRepo
        {
            get
            {
                return _allowDirtyRepo;
            }
            set
            {
                _allowDirtyRepo = value;
            }
        }
    
        /// <summary>
        /// Skip hardware validation
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("skip_hardware_validation")]
        [System.ComponentModel.DescriptionAttribute("Skip hardware validation")]
        public bool SkipHardwareValidation
        {
            get
            {
                return _skipHardwareValidation;
            }
            set
            {
                _skipHardwareValidation = value;
            }
        }
    
        public System.IObservable<AindBehaviorSessionModel> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindBehaviorSessionModel(this)));
        }
    
        public System.IObservable<AindBehaviorSessionModel> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindBehaviorSessionModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("AindBehaviorServicesPkgVersion = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("Version = " + _version + ", ");
            stringBuilder.Append("Experiment = " + _experiment + ", ");
            stringBuilder.Append("Experimenter = " + _experimenter + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("RootPath = " + _rootPath + ", ");
            stringBuilder.Append("SessionName = " + _sessionName + ", ");
            stringBuilder.Append("Subject = " + _subject + ", ");
            stringBuilder.Append("ExperimentVersion = " + _experimentVersion + ", ");
            stringBuilder.Append("Notes = " + _notes + ", ");
            stringBuilder.Append("CommitHash = " + _commitHash + ", ");
            stringBuilder.Append("AllowDirtyRepo = " + _allowDirtyRepo + ", ");
            stringBuilder.Append("SkipHardwareValidation = " + _skipHardwareValidation);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Complete rig configuration model for AIND FIP photometry system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Complete rig configuration model for AIND FIP photometry system.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindPhysioFipRig
    {
    
        private string _aindBehaviorServicesPkgVersion;
    
        private string _version;
    
        private string _computerName;
    
        private string _rigName;
    
        private FipCamera _cameraGreenIso;
    
        private FipCamera _cameraRed;
    
        private LightSource _lightSourceUv;
    
        private LightSource _lightSourceBlue;
    
        private LightSource _lightSourceLime;
    
        private RoiSettings _roiSettings;
    
        private HarpCuttlefishfip _cuttlefishFip;
    
        private Networking _networking;
    
        public AindPhysioFipRig()
        {
            _aindBehaviorServicesPkgVersion = "0.12.2";
            _version = "0.0.0";
            _cameraGreenIso = new FipCamera();
            _cameraRed = new FipCamera();
            _lightSourceUv = new LightSource();
            _lightSourceBlue = new LightSource();
            _lightSourceLime = new LightSource();
            _cuttlefishFip = new HarpCuttlefishfip();
            _networking = new Networking();
        }
    
        protected AindPhysioFipRig(AindPhysioFipRig other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _computerName = other._computerName;
            _rigName = other._rigName;
            _cameraGreenIso = other._cameraGreenIso;
            _cameraRed = other._cameraRed;
            _lightSourceUv = other._lightSourceUv;
            _lightSourceBlue = other._lightSourceBlue;
            _lightSourceLime = other._lightSourceLime;
            _roiSettings = other._roiSettings;
            _cuttlefishFip = other._cuttlefishFip;
            _networking = other._networking;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Computer name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("computer_name")]
        [System.ComponentModel.DescriptionAttribute("Computer name")]
        public string ComputerName
        {
            get
            {
                return _computerName;
            }
            set
            {
                _computerName = value;
            }
        }
    
        /// <summary>
        /// Rig name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rig name")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        /// <summary>
        /// Camera for the green and iso channels
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_green_iso", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera for the green and iso channels")]
        public FipCamera CameraGreenIso
        {
            get
            {
                return _cameraGreenIso;
            }
            set
            {
                _cameraGreenIso = value;
            }
        }
    
        /// <summary>
        /// Red camera
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_red", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Red camera")]
        public FipCamera CameraRed
        {
            get
            {
                return _cameraRed;
            }
            set
            {
                _cameraRed = value;
            }
        }
    
        /// <summary>
        /// UV (415nm) light source
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("light_source_uv", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("UV (415nm) light source")]
        public LightSource LightSourceUv
        {
            get
            {
                return _lightSourceUv;
            }
            set
            {
                _lightSourceUv = value;
            }
        }
    
        /// <summary>
        /// Blue (470nm) light source
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("light_source_blue", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Blue (470nm) light source")]
        public LightSource LightSourceBlue
        {
            get
            {
                return _lightSourceBlue;
            }
            set
            {
                _lightSourceBlue = value;
            }
        }
    
        /// <summary>
        /// Lime (560nm) light source
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("light_source_lime", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Lime (560nm) light source")]
        public LightSource LightSourceLime
        {
            get
            {
                return _lightSourceLime;
            }
            set
            {
                _lightSourceLime = value;
            }
        }
    
        /// <summary>
        /// Region of interest settings. Leave empty to attempt to load from local file or manually define it in the program.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("roi_settings")]
        [System.ComponentModel.DescriptionAttribute("Region of interest settings. Leave empty to attempt to load from local file or ma" +
            "nually define it in the program.")]
        public RoiSettings RoiSettings
        {
            get
            {
                return _roiSettings;
            }
            set
            {
                _roiSettings = value;
            }
        }
    
        /// <summary>
        /// CuttlefishFip board for controlling the trigger of cameras and light-sources
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cuttlefish_fip", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("CuttlefishFip board for controlling the trigger of cameras and light-sources")]
        public HarpCuttlefishfip CuttlefishFip
        {
            get
            {
                return _cuttlefishFip;
            }
            set
            {
                _cuttlefishFip = value;
            }
        }
    
        /// <summary>
        /// Networking settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("networking")]
        [System.ComponentModel.DescriptionAttribute("Networking settings")]
        public Networking Networking
        {
            get
            {
                return _networking;
            }
            set
            {
                _networking = value;
            }
        }
    
        public System.IObservable<AindPhysioFipRig> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindPhysioFipRig(this)));
        }
    
        public System.IObservable<AindPhysioFipRig> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindPhysioFipRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("AindBehaviorServicesPkgVersion = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("Version = " + _version + ", ");
            stringBuilder.Append("ComputerName = " + _computerName + ", ");
            stringBuilder.Append("RigName = " + _rigName + ", ");
            stringBuilder.Append("CameraGreenIso = " + _cameraGreenIso + ", ");
            stringBuilder.Append("CameraRed = " + _cameraRed + ", ");
            stringBuilder.Append("LightSourceUv = " + _lightSourceUv + ", ");
            stringBuilder.Append("LightSourceBlue = " + _lightSourceBlue + ", ");
            stringBuilder.Append("LightSourceLime = " + _lightSourceLime + ", ");
            stringBuilder.Append("RoiSettings = " + _roiSettings + ", ");
            stringBuilder.Append("CuttlefishFip = " + _cuttlefishFip + ", ");
            stringBuilder.Append("Networking = " + _networking);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BaseModel
    {
    
        public BaseModel()
        {
        }
    
        protected BaseModel(BaseModel other)
        {
        }
    
        public System.IObservable<BaseModel> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseModel(this)));
        }
    
        public System.IObservable<BaseModel> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Circle
    {
    
        private Point2f _center;
    
        private double _radius;
    
        public Circle()
        {
            _center = new Point2f();
            _radius = 1D;
        }
    
        protected Circle(Circle other)
        {
            _center = other._center;
            _radius = other._radius;
        }
    
        /// <summary>
        /// Center of the circle (px)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("center")]
        [System.ComponentModel.DescriptionAttribute("Center of the circle (px)")]
        public Point2f Center
        {
            get
            {
                return _center;
            }
            set
            {
                _center = value;
            }
        }
    
        /// <summary>
        /// Radius of the circle (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("radius")]
        [System.ComponentModel.DescriptionAttribute("Radius of the circle (px)")]
        public double Radius
        {
            get
            {
                return _radius;
            }
            set
            {
                _radius = value;
            }
        }
    
        public System.IObservable<Circle> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Circle(this)));
        }
    
        public System.IObservable<Circle> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Circle(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Center = " + _center + ", ");
            stringBuilder.Append("Radius = " + _radius);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Camera device configuration for FIP photometry system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Camera device configuration for FIP photometry system.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class FipCamera
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private double _gain;
    
        private Point2f _offset;
    
        public FipCamera()
        {
            _deviceType = "FipCamera";
            _gain = 0D;
            _offset = new Point2f();
        }
    
        protected FipCamera(FipCamera other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _gain = other._gain;
            _offset = other._offset;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Offset (px)
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("offset")]
        [System.ComponentModel.DescriptionAttribute("Offset (px)")]
        public Point2f Offset
        {
            get
            {
                return _offset;
            }
            set
            {
                _offset = value;
            }
        }
    
        public System.IObservable<FipCamera> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FipCamera(this)));
        }
    
        public System.IObservable<FipCamera> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FipCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("Gain = " + _gain + ", ");
            stringBuilder.Append("Offset = " + _offset);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Task configuration for FIP timing and triggering parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Task configuration for FIP timing and triggering parameters.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class FipTask
    {
    
        private int _delta1;
    
        private int _delta2;
    
        private int _delta3;
    
        private int _delta4;
    
        private Ports _lightSourcePort;
    
        private Ports _cameraPort;
    
        private bool _eventsEnabled;
    
        private bool _muteOutput;
    
        private double _pwmFrequency;
    
        public FipTask()
        {
            _delta1 = 15650;
            _delta2 = 666;
            _delta3 = 300;
            _delta4 = 50;
            _eventsEnabled = true;
            _muteOutput = false;
            _pwmFrequency = 10000D;
        }
    
        protected FipTask(FipTask other)
        {
            _delta1 = other._delta1;
            _delta2 = other._delta2;
            _delta3 = other._delta3;
            _delta4 = other._delta4;
            _lightSourcePort = other._lightSourcePort;
            _cameraPort = other._cameraPort;
            _eventsEnabled = other._eventsEnabled;
            _muteOutput = other._muteOutput;
            _pwmFrequency = other._pwmFrequency;
        }
    
        /// <summary>
        /// Delta 1 (us)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("delta_1")]
        [System.ComponentModel.DescriptionAttribute("Delta 1 (us)")]
        public int Delta1
        {
            get
            {
                return _delta1;
            }
            set
            {
                _delta1 = value;
            }
        }
    
        /// <summary>
        /// Delta 2 (us)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("delta_2")]
        [System.ComponentModel.DescriptionAttribute("Delta 2 (us)")]
        public int Delta2
        {
            get
            {
                return _delta2;
            }
            set
            {
                _delta2 = value;
            }
        }
    
        /// <summary>
        /// Delta 3 (us)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("delta_3")]
        [System.ComponentModel.DescriptionAttribute("Delta 3 (us)")]
        public int Delta3
        {
            get
            {
                return _delta3;
            }
            set
            {
                _delta3 = value;
            }
        }
    
        /// <summary>
        /// Delta 4 (us)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("delta_4")]
        [System.ComponentModel.DescriptionAttribute("Delta 4 (us)")]
        public int Delta4
        {
            get
            {
                return _delta4;
            }
            set
            {
                _delta4 = value;
            }
        }
    
        /// <summary>
        /// Port that triggers the light source.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("light_source_port", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Port that triggers the light source.")]
        public Ports LightSourcePort
        {
            get
            {
                return _lightSourcePort;
            }
            set
            {
                _lightSourcePort = value;
            }
        }
    
        /// <summary>
        /// Port that triggers the camera.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_port", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Port that triggers the camera.")]
        public Ports CameraPort
        {
            get
            {
                return _cameraPort;
            }
            set
            {
                _cameraPort = value;
            }
        }
    
        /// <summary>
        /// Whether to enable events for the task. If False, the task will not trigger any events.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("events_enabled")]
        [System.ComponentModel.DescriptionAttribute("Whether to enable events for the task. If False, the task will not trigger any ev" +
            "ents.")]
        public bool EventsEnabled
        {
            get
            {
                return _eventsEnabled;
            }
            set
            {
                _eventsEnabled = value;
            }
        }
    
        /// <summary>
        /// Whether to mute the output of the task. If True, the task will not trigger any outputs but timing will be preserved.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mute_output")]
        [System.ComponentModel.DescriptionAttribute("Whether to mute the output of the task. If True, the task will not trigger any ou" +
            "tputs but timing will be preserved.")]
        public bool MuteOutput
        {
            get
            {
                return _muteOutput;
            }
            set
            {
                _muteOutput = value;
            }
        }
    
        /// <summary>
        /// PWM frequency (Hz) of the light source output.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pwm_frequency")]
        [System.ComponentModel.DescriptionAttribute("PWM frequency (Hz) of the light source output.")]
        public double PwmFrequency
        {
            get
            {
                return _pwmFrequency;
            }
            set
            {
                _pwmFrequency = value;
            }
        }
    
        public System.IObservable<FipTask> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FipTask(this)));
        }
    
        public System.IObservable<FipTask> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FipTask(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Delta1 = " + _delta1 + ", ");
            stringBuilder.Append("Delta2 = " + _delta2 + ", ");
            stringBuilder.Append("Delta3 = " + _delta3 + ", ");
            stringBuilder.Append("Delta4 = " + _delta4 + ", ");
            stringBuilder.Append("LightSourcePort = " + _lightSourcePort + ", ");
            stringBuilder.Append("CameraPort = " + _cameraPort + ", ");
            stringBuilder.Append("EventsEnabled = " + _eventsEnabled + ", ");
            stringBuilder.Append("MuteOutput = " + _muteOutput + ", ");
            stringBuilder.Append("PwmFrequency = " + _pwmFrequency);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpCuttlefishfip
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpCuttlefishfip()
        {
            _deviceType = "cuTTLefishFip";
            _whoAmI = 1407;
        }
    
        protected HarpCuttlefishfip(HarpCuttlefishfip other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpCuttlefishfip> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpCuttlefishfip(this)));
        }
    
        public System.IObservable<HarpCuttlefishfip> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpCuttlefishfip(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Light source device configuration with power control and timing tasks.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Light source device configuration with power control and timing tasks.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LightSource
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private LightSourceCalibration _calibration;
    
        private double _power;
    
        private FipTask _task;
    
        public LightSource()
        {
            _deviceType = "LightSource";
            _power = 0D;
            _task = new FipTask();
        }
    
        protected LightSource(LightSource other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _power = other._power;
            _task = other._task;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration for the LightSource. If left empty, 'power' will be used as duty-cycle (0-100).
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration for the LightSource. If left empty, \'power\' will be used as duty-cycl" +
            "e (0-100).")]
        public LightSourceCalibration Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Power (mW)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("power")]
        [System.ComponentModel.DescriptionAttribute("Power (mW)")]
        public double Power
        {
            get
            {
                return _power;
            }
            set
            {
                _power = value;
            }
        }
    
        /// <summary>
        /// Task for the light source
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("task", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Task for the light source")]
        public FipTask Task
        {
            get
            {
                return _task;
            }
            set
            {
                _task = value;
            }
        }
    
        public System.IObservable<LightSource> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LightSource(this)));
        }
    
        public System.IObservable<LightSource> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LightSource(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("Power = " + _power + ", ");
            stringBuilder.Append("Task = " + _task);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Calibration model for converting light source duty cycle to power output.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Calibration model for converting light source duty cycle to power output.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LightSourceCalibration
    {
    
        private string _deviceName;
    
        private BaseModel _input;
    
        private LightSourceCalibrationOutput _output;
    
        private System.DateTimeOffset? _date;
    
        private string _description;
    
        private string _notes;
    
        public LightSourceCalibration()
        {
            _output = new LightSourceCalibrationOutput();
        }
    
        protected LightSourceCalibration(LightSourceCalibration other)
        {
            _deviceName = other._deviceName;
            _input = other._input;
            _output = other._output;
            _date = other._date;
            _description = other._description;
            _notes = other._notes;
        }
    
        /// <summary>
        /// Name of the device being calibrated
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Name of the device being calibrated")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input")]
        public BaseModel Input
        {
            get
            {
                return _input;
            }
            set
            {
                _input = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        public LightSourceCalibrationOutput Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("date")]
        public System.DateTimeOffset? Date
        {
            get
            {
                return _date;
            }
            set
            {
                _date = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                _description = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("notes")]
        public string Notes
        {
            get
            {
                return _notes;
            }
            set
            {
                _notes = value;
            }
        }
    
        public System.IObservable<LightSourceCalibration> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LightSourceCalibration(this)));
        }
    
        public System.IObservable<LightSourceCalibration> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LightSourceCalibration(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("Input = " + _input + ", ");
            stringBuilder.Append("Output = " + _output + ", ");
            stringBuilder.Append("Date = " + _date + ", ");
            stringBuilder.Append("Description = " + _description + ", ");
            stringBuilder.Append("Notes = " + _notes);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Output of the light source calibration process.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Output of the light source calibration process.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class LightSourceCalibrationOutput
    {
    
        private System.Collections.Generic.Dictionary<string, double> _powerLut;
    
        public LightSourceCalibrationOutput()
        {
            _powerLut = new System.Collections.Generic.Dictionary<string, double>();
        }
    
        protected LightSourceCalibrationOutput(LightSourceCalibrationOutput other)
        {
            _powerLut = other._powerLut;
        }
    
        /// <summary>
        /// Look-up table for LightSource power vs. duty cycle
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("power_lut", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Look-up table for LightSource power vs. duty cycle")]
        public System.Collections.Generic.Dictionary<string, double> PowerLut
        {
            get
            {
                return _powerLut;
            }
            set
            {
                _powerLut = value;
            }
        }
    
        public System.IObservable<LightSourceCalibrationOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LightSourceCalibrationOutput(this)));
        }
    
        public System.IObservable<LightSourceCalibrationOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LightSourceCalibrationOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("PowerLut = " + _powerLut);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Network configuration settings for ZeroMQ communication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Network configuration settings for ZeroMQ communication.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Networking
    {
    
        private ZmqConnection _zmqPublisher;
    
        private ZmqConnection _zmqSubscriber;
    
        public Networking()
        {
            _zmqPublisher = new ZmqConnection();
            _zmqSubscriber = new ZmqConnection();
        }
    
        protected Networking(Networking other)
        {
            _zmqPublisher = other._zmqPublisher;
            _zmqSubscriber = other._zmqSubscriber;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmq_publisher")]
        public ZmqConnection ZmqPublisher
        {
            get
            {
                return _zmqPublisher;
            }
            set
            {
                _zmqPublisher = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmq_subscriber")]
        public ZmqConnection ZmqSubscriber
        {
            get
            {
                return _zmqSubscriber;
            }
            set
            {
                _zmqSubscriber = value;
            }
        }
    
        public System.IObservable<Networking> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Networking(this)));
        }
    
        public System.IObservable<Networking> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Networking(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ZmqPublisher = " + _zmqPublisher + ", ");
            stringBuilder.Append("ZmqSubscriber = " + _zmqSubscriber);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Point2f
    {
    
        private double _x;
    
        private double _y;
    
        public Point2f()
        {
        }
    
        protected Point2f(Point2f other)
        {
            _x = other._x;
            _y = other._y;
        }
    
        /// <summary>
        /// X coordinate of the point (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the point (px)")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the point (px)
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the point (px)")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        public System.IObservable<Point2f> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Point2f(this)));
        }
    
        public System.IObservable<Point2f> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Point2f(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("X = " + _x + ", ");
            stringBuilder.Append("Y = " + _y);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Available hardware ports in the FIP cuttlefish board.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum Ports
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Io0 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Io1 = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Io2 = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
        Io3 = 8,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
        Io4 = 16,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
        Io5 = 32,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
        Io6 = 64,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
        Io7 = 128,
    }


    /// <summary>
    /// Region of Interest (ROI) settings for camera channels in the FIP system.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Region of Interest (ROI) settings for camera channels in the FIP system.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class RoiSettings
    {
    
        private Circle _cameraGreenIsoBackground;
    
        private Circle _cameraRedBackground;
    
        private System.Collections.Generic.List<Circle> _cameraGreenIsoRoi;
    
        private System.Collections.Generic.List<Circle> _cameraRedRoi;
    
        public RoiSettings()
        {
            _cameraGreenIsoBackground = new Circle();
            _cameraRedBackground = new Circle();
            _cameraGreenIsoRoi = new System.Collections.Generic.List<Circle>();
            _cameraRedRoi = new System.Collections.Generic.List<Circle>();
        }
    
        protected RoiSettings(RoiSettings other)
        {
            _cameraGreenIsoBackground = other._cameraGreenIsoBackground;
            _cameraRedBackground = other._cameraRedBackground;
            _cameraGreenIsoRoi = other._cameraGreenIsoRoi;
            _cameraRedRoi = other._cameraRedRoi;
        }
    
        /// <summary>
        /// ROI to compute the background for the green/iso camera channel
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_green_iso_background")]
        [System.ComponentModel.DescriptionAttribute("ROI to compute the background for the green/iso camera channel")]
        public Circle CameraGreenIsoBackground
        {
            get
            {
                return _cameraGreenIsoBackground;
            }
            set
            {
                _cameraGreenIsoBackground = value;
            }
        }
    
        /// <summary>
        /// ROI to compute the background for the red camera channel
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_red_background")]
        [System.ComponentModel.DescriptionAttribute("ROI to compute the background for the red camera channel")]
        public Circle CameraRedBackground
        {
            get
            {
                return _cameraRedBackground;
            }
            set
            {
                _cameraRedBackground = value;
            }
        }
    
        /// <summary>
        /// ROI for the green/iso camera channel
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_green_iso_roi")]
        [System.ComponentModel.DescriptionAttribute("ROI for the green/iso camera channel")]
        public System.Collections.Generic.List<Circle> CameraGreenIsoRoi
        {
            get
            {
                return _cameraGreenIsoRoi;
            }
            set
            {
                _cameraGreenIsoRoi = value;
            }
        }
    
        /// <summary>
        /// ROI for the red camera channel
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_red_roi")]
        [System.ComponentModel.DescriptionAttribute("ROI for the red camera channel")]
        public System.Collections.Generic.List<Circle> CameraRedRoi
        {
            get
            {
                return _cameraRedRoi;
            }
            set
            {
                _cameraRedRoi = value;
            }
        }
    
        public System.IObservable<RoiSettings> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RoiSettings(this)));
        }
    
        public System.IObservable<RoiSettings> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RoiSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("CameraGreenIsoBackground = " + _cameraGreenIsoBackground + ", ");
            stringBuilder.Append("CameraRedBackground = " + _cameraRedBackground + ", ");
            stringBuilder.Append("CameraGreenIsoRoi = " + _cameraGreenIsoRoi + ", ");
            stringBuilder.Append("CameraRedRoi = " + _cameraRedRoi);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ZmqConnection
    {
    
        private string _connectionString;
    
        private string _topic;
    
        public ZmqConnection()
        {
            _connectionString = "@tcp://localhost:5556";
            _topic = "";
        }
    
        protected ZmqConnection(ZmqConnection other)
        {
            _connectionString = other._connectionString;
            _topic = other._topic;
        }
    
        /// <summary>
        /// The connection string for the ZMQ socket.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("connection_string")]
        [System.ComponentModel.DescriptionAttribute("The connection string for the ZMQ socket.")]
        public string ConnectionString
        {
            get
            {
                return _connectionString;
            }
            set
            {
                _connectionString = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("topic")]
        public string Topic
        {
            get
            {
                return _topic;
            }
            set
            {
                _topic = value;
            }
        }
    
        public System.IObservable<ZmqConnection> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ZmqConnection(this)));
        }
    
        public System.IObservable<ZmqConnection> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ZmqConnection(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ConnectionString = " + _connectionString + ", ");
            stringBuilder.Append("Topic = " + _topic);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [Bonsai.CombinatorAttribute()]
    public partial class SerializeToJson
    {
    
        public Newtonsoft.Json.Formatting Formatting { get; set; }

        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            var formatting = Formatting;
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value, formatting));
        }

        public System.IObservable<string> Process(System.IObservable<AindBehaviorSessionModel> source)
        {
            return Process<AindBehaviorSessionModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindPhysioFipRig> source)
        {
            return Process<AindPhysioFipRig>(source);
        }

        public System.IObservable<string> Process(System.IObservable<BaseModel> source)
        {
            return Process<BaseModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Circle> source)
        {
            return Process<Circle>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FipCamera> source)
        {
            return Process<FipCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FipTask> source)
        {
            return Process<FipTask>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpCuttlefishfip> source)
        {
            return Process<HarpCuttlefishfip>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LightSource> source)
        {
            return Process<LightSource>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LightSourceCalibration> source)
        {
            return Process<LightSourceCalibration>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LightSourceCalibrationOutput> source)
        {
            return Process<LightSourceCalibrationOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Networking> source)
        {
            return Process<Networking>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Point2f> source)
        {
            return Process<Point2f>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RoiSettings> source)
        {
            return Process<RoiSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqConnection> source)
        {
            return Process<ZmqConnection>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindBehaviorSessionModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindPhysioFipRig>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Circle>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FipCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FipTask>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpCuttlefishfip>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LightSource>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LightSourceCalibration>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LightSourceCalibrationOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Networking>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Point2f>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RoiSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqConnection>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindBehaviorSessionModel>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}